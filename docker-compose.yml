version: '3.8'

services:
  # n8n - Workflow automation platform
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    ports:
      - "${N8N_PORT:-5678}:5678"
    environment:
      # Basic configuration
      - N8N_HOST=${N8N_HOST:-0.0.0.0}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - NODE_ENV=${NODE_ENV:-production}
      
      # Database configuration (conditionally use PostgreSQL)
      - DB_TYPE=${DB_TYPE:-sqlite}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_HOST=${DB_POSTGRESDB_HOST:-postgres}
      - DB_POSTGRESDB_PORT=${DB_POSTGRESDB_PORT:-5432}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-n8n}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-n8n123}
      - DB_POSTGRESDB_SCHEMA=${DB_POSTGRESDB_SCHEMA:-public}
      
      # Redis/Valkey configuration (for scaling and queue)
      - QUEUE_BULL_REDIS_HOST=${REDIS_HOST:-valkey}
      - QUEUE_BULL_REDIS_PORT=${REDIS_PORT:-6379}
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - N8N_REDIS_HOST=${REDIS_HOST:-valkey}
      - N8N_REDIS_PORT=${REDIS_PORT:-6379}
      - N8N_REDIS_PASSWORD=${REDIS_PASSWORD:-}
      
      # Security
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_JWT_SECRET:-}
      
      # Features
      - N8N_METRICS=${N8N_METRICS:-false}
      - N8N_LOG_LEVEL=${N8N_LOG_LEVEL:-info}
      - EXECUTIONS_PROCESS=${EXECUTIONS_PROCESS:-main}
      - EXECUTIONS_MODE=${EXECUTIONS_MODE:-regular}
      
      # Webhooks
      - WEBHOOK_URL=${WEBHOOK_URL:-http://localhost:5678/}
      
      # User management
      - N8N_USER_MANAGEMENT_DISABLED=${N8N_USER_MANAGEMENT_DISABLED:-false}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./n8n/custom-nodes:/home/node/.n8n/custom
    depends_on:
      postgres:
        condition: service_healthy
        required: false
      valkey:
        condition: service_healthy
        required: false
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: n8n-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-n8n}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-n8n123}
      - POSTGRES_DB=${POSTGRES_DB:-n8n}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-n8n} -d ${POSTGRES_DB:-n8n}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles:
      - postgres
      - full

  # Valkey (Redis alternative) for caching and queues (optional)
  valkey:
    image: valkey/valkey:7-alpine
    container_name: n8n-valkey
    restart: unless-stopped
    command: >
      valkey-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-}
      --maxmemory ${REDIS_MAX_MEMORY:-256mb}
      --maxmemory-policy allkeys-lru
    volumes:
      - valkey_data:/data
      - ./valkey/valkey.conf:/usr/local/etc/valkey/valkey.conf:ro
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "valkey-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    profiles:
      - valkey
      - full

  # Optional: Valkey Commander (Web UI for Valkey)
  valkey-commander:
    image: rediscommander/redis-commander:latest
    container_name: n8n-valkey-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=valkey:valkey:6379:0:${REDIS_PASSWORD:-}
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin123}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      valkey:
        condition: service_healthy
    networks:
      - n8n-network
    profiles:
      - valkey-ui
      - full

  # Optional: pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: n8n-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@n8n.local}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - n8n-network
    profiles:
      - postgres-ui
      - full

volumes:
  n8n_data:
    driver: local
  postgres_data:
    driver: local
  valkey_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  n8n-network:
    driver: bridge